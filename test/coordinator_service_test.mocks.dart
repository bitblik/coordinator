// Mocks generated by Mockito 5.4.6 from annotations
// in bitblik_coordinator/test/coordinator_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i12;

import 'package:bitblik_coordinator/src/models/create_hold_invoice_result.dart'
    as _i3;
import 'package:bitblik_coordinator/src/models/invoice_update.dart' as _i9;
import 'package:bitblik_coordinator/src/models/offer.dart' as _i2;
import 'package:bitblik_coordinator/src/models/pay_invoice_result.dart' as _i4;
import 'package:bitblik_coordinator/src/services/database_service.dart' as _i6;
import 'package:bitblik_coordinator/src/services/payment_service.dart' as _i8;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOffer_0 extends _i1.SmartFake implements _i2.Offer {
  _FakeOffer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCreateHoldInvoiceResult_1 extends _i1.SmartFake
    implements _i3.CreateHoldInvoiceResult {
  _FakeCreateHoldInvoiceResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePayInvoiceResult_2 extends _i1.SmartFake
    implements _i4.PayInvoiceResult {
  _FakePayInvoiceResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i6.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.Offer> createOffer(_i2.Offer? offer) => (super.noSuchMethod(
        Invocation.method(
          #createOffer,
          [offer],
        ),
        returnValue: _i7.Future<_i2.Offer>.value(_FakeOffer_0(
          this,
          Invocation.method(
            #createOffer,
            [offer],
          ),
        )),
      ) as _i7.Future<_i2.Offer>);

  @override
  _i7.Future<_i2.Offer?> getOfferById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getOfferById,
          [id],
        ),
        returnValue: _i7.Future<_i2.Offer?>.value(),
      ) as _i7.Future<_i2.Offer?>);

  @override
  _i7.Future<_i2.Offer?> getOfferByPaymentHash(String? paymentHash) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfferByPaymentHash,
          [paymentHash],
        ),
        returnValue: _i7.Future<_i2.Offer?>.value(),
      ) as _i7.Future<_i2.Offer?>);

  @override
  _i7.Future<List<_i2.Offer>> getOffersByStatus(
    _i2.OfferStatus? status, {
    int? limit = 50,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOffersByStatus,
          [status],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i7.Future<List<_i2.Offer>>.value(<_i2.Offer>[]),
      ) as _i7.Future<List<_i2.Offer>>);

  @override
  _i7.Future<bool> updateTakerInvoice(
    String? id,
    String? takerInvoice,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTakerInvoice,
          [
            id,
            takerInvoice,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateTakerInvoiceFees(
    String? id,
    int? fees,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTakerInvoiceFees,
          [
            id,
            fees,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> updateOfferStatus(
    String? id,
    _i2.OfferStatus? newStatus, {
    String? takerPubkey,
    String? blikCode,
    String? takerLightningAddress,
    DateTime? reservedAt,
    DateTime? blikReceivedAt,
    int? takerFees,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateOfferStatus,
          [
            id,
            newStatus,
          ],
          {
            #takerPubkey: takerPubkey,
            #blikCode: blikCode,
            #takerLightningAddress: takerLightningAddress,
            #reservedAt: reservedAt,
            #blikReceivedAt: blikReceivedAt,
            #takerFees: takerFees,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> cancelOffer(
    String? id,
    String? makerPubkey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelOffer,
          [
            id,
            makerPubkey,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<_i2.Offer>> getMyActiveOffers(String? userPubkey) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyActiveOffers,
          [userPubkey],
        ),
        returnValue: _i7.Future<List<_i2.Offer>>.value(<_i2.Offer>[]),
      ) as _i7.Future<List<_i2.Offer>>);
}

/// A class which mocks [PaymentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentService extends _i1.Mock implements _i8.PaymentService {
  MockPaymentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i3.CreateHoldInvoiceResult> createHoldInvoice({
    required int? amountSats,
    required String? memo,
    required String? paymentHashHex,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createHoldInvoice,
          [],
          {
            #amountSats: amountSats,
            #memo: memo,
            #paymentHashHex: paymentHashHex,
          },
        ),
        returnValue: _i7.Future<_i3.CreateHoldInvoiceResult>.value(
            _FakeCreateHoldInvoiceResult_1(
          this,
          Invocation.method(
            #createHoldInvoice,
            [],
            {
              #amountSats: amountSats,
              #memo: memo,
              #paymentHashHex: paymentHashHex,
            },
          ),
        )),
      ) as _i7.Future<_i3.CreateHoldInvoiceResult>);

  @override
  _i7.Future<void> settleInvoice({required String? preimageHex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #settleInvoice,
          [],
          {#preimageHex: preimageHex},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> cancelInvoice({required String? paymentHashHex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelInvoice,
          [],
          {#paymentHashHex: paymentHashHex},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i4.PayInvoiceResult> payInvoice({
    required String? invoice,
    int? amountSat,
    int? feeLimitSat,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #payInvoice,
          [],
          {
            #invoice: invoice,
            #amountSat: amountSat,
            #feeLimitSat: feeLimitSat,
          },
        ),
        returnValue:
            _i7.Future<_i4.PayInvoiceResult>.value(_FakePayInvoiceResult_2(
          this,
          Invocation.method(
            #payInvoice,
            [],
            {
              #invoice: invoice,
              #amountSat: amountSat,
              #feeLimitSat: feeLimitSat,
            },
          ),
        )),
      ) as _i7.Future<_i4.PayInvoiceResult>);

  @override
  _i7.Stream<_i9.InvoiceUpdate> subscribeToInvoiceUpdates(
          {required String? paymentHashHex}) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToInvoiceUpdates,
          [],
          {#paymentHashHex: paymentHashHex},
        ),
        returnValue: _i7.Stream<_i9.InvoiceUpdate>.empty(),
      ) as _i7.Stream<_i9.InvoiceUpdate>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i5.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i10.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i5.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i12.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i12.Uint8List>.value(_i12.Uint8List(0)),
      ) as _i7.Future<_i12.Uint8List>);

  @override
  _i7.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
